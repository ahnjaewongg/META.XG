{"version":3,"sources":["components/SearchBar.tsx","components/Header.tsx","components/GameFilter.tsx","components/MatchHistory.tsx","config/config.ts","services/riotService.ts","components/SummonerProfile.tsx","components/SummonerContent.tsx","components/NavigationTabs.tsx","App.tsx","index.tsx"],"names":["SearchBar","_ref","onSearch","summonerName","setSummonerName","useState","_jsxs","onSubmit","e","preventDefault","trim","className","children","_jsx","type","value","onChange","target","placeholder","Header","src","alt","width","height","GameFilter","MatchHistory","matches","expandedMatch","setExpandedMatch","map","match","participant","searchedPuuid","info","participants","puuid","find","p","findPlayerParticipant","concat","win","onClick","toggleMatchDetails","matchId","metadata","championName","kills","deaths","assists","Math","max","toFixed","floor","gameDuration","Date","gameCreation","toLocaleDateString","items","itemId","index","cs","goldEarned","toLocaleString","config","RIOT_API_KEY","RIOT_API_BASE_URL","API_BASE_URL","RiotService","constructor","headers","getSummonerByName","axios","get","encodeURIComponent","data","error","console","getMatchList","start","arguments","length","undefined","count","this","params","getMatchDetails","getMatchHistory","encodedName","log","withCredentials","isAxiosError","_error$response","message","response","status","Error","getSummonerRank","summonerId","getCurrentGame","_error$response2","SummonerProfile","summoner","setSummoner","rank","setRank","currentGame","setCurrentGame","riotService","name","tag","split","useEffect","async","summonerData","rankData","id","gameData","loadSummonerData","profileIconId","summonerLevel","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeDasharray","strokeLinejoin","SummonerContent","tier","toLowerCase","leaguePoints","wins","losses","NavigationTabs","onTabChange","activeTab","setActiveTab","handleTabClick","tab","App","setMatches","isLoading","setIsLoading","setError","matchHistory","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1df5c055.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n// SearchBar 컴포넌트의 props 타입 정의\r\ninterface SearchBarProps {\r\n    onSearch: (summonerName: string) => void; // 검색 실행 함수\r\n}\r\n\r\n// SearchBar 컴포넌트\r\nexport const SearchBar: React.FC<SearchBarProps> = ({ onSearch }) => {\r\n    // 입력된 소환사명을 저장할 상태\r\n    const [summonerName, setSummonerName] = useState('');\r\n\r\n\r\n    // 폼 제출 처리 함수\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault(); // 기본 폼 제출 동작 방지\r\n        if (summonerName.trim()) {\r\n            onSearch(summonerName); // 부모 컴포넌트의 검색 함수 호출\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"search-bar\">\r\n            <input\r\n                type=\"text\"\r\n                value={summonerName}\r\n                // 입력값이 변경될 때마다 상태 업데이트\r\n                onChange={(e) => setSummonerName(e.target.value)}\r\n                placeholder=\"소환사명#태그 (예: Hide on bush#KR1)\"\r\n                aria-label=\"소환사 검색\"\r\n            />\r\n            <button type=\"submit\">검색</button>\r\n        </form>\r\n    );\r\n};","import React from 'react';\r\nimport { SearchBar } from './SearchBar';\r\nimport './Header.css';\r\n\r\ninterface HeaderProps {\r\n    onSearch: (summonerName: string) => void;\r\n}\r\n\r\nexport const Header: React.FC<HeaderProps> = ({ onSearch }) => {\r\n    return (\r\n        <header className=\"app-header\">\r\n            <div className=\"header-container\">\r\n                <div className=\"header-left\">\r\n                    <h1 className=\"logo\">META.XG</h1>\r\n                    <nav className=\"main-nav\">\r\n                        <button className=\"nav-btn active\">홈</button>\r\n                        <button className=\"nav-btn\">챔피언 분석</button>\r\n                        <button className=\"nav-btn\">랭킹</button>\r\n                        <button className=\"nav-btn\">멀티서치</button>\r\n                    </nav>\r\n                </div>\r\n                <div className=\"header-center\">\r\n                    <SearchBar onSearch={onSearch} />\r\n                </div>\r\n                <div className=\"header-right\">\r\n                    <button className=\"setting-btn mode-toggle\">\r\n                        <img src=\"/images/ico_moon.svg\" alt=\"다크모드\" width=\"20\" height=\"20\" />\r\n                    </button>\r\n                    <button className=\"setting-btn language-toggle\">\r\n                        <img src=\"/images/ico_globe.svg\" alt=\"언어 변경\" width=\"20\" height=\"20\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './GameFilter.css';\r\n\r\nexport const GameFilter: React.FC = () => {\r\n    return (\r\n        <div className=\"game-filter\">\r\n            <div className=\"queue-filters\">\r\n                <button className=\"filter-btn active\">전체</button>\r\n                <button className=\"filter-btn\">솔로랭크</button>\r\n                <button className=\"filter-btn\">자유랭크</button>\r\n                <button className=\"filter-btn\">빠른대전</button>\r\n                <button className=\"filter-btn\">칼바람나락</button>\r\n            </div>\r\n            <div className=\"champion-search\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"챔피언 검색\"\r\n                    className=\"champion-input\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}; ","import React, { useState } from 'react';\nimport './MatchHistory.css';\nimport { Match } from '../types/Match';\nimport { GameFilter } from './GameFilter';\n\ninterface MatchHistoryProps {\n    matches: Match[];\n}\n\nexport const MatchHistory: React.FC<MatchHistoryProps> = ({ matches }) => {\n    const [expandedMatch, setExpandedMatch] = useState<string | null>(null);\n    \n    const handleQueueFilterChange = (queueType: string) => {\n        // 큐 타입 필터링 로직\n        console.log('Queue filter:', queueType);\n    };\n\n    const handleChampionSearch = (championName: string) => {\n        // 챔피언 검색 로직\n        console.log('Champion search:', championName);\n    };\n\n    const toggleMatchDetails = (matchId: string) => {\n        setExpandedMatch(expandedMatch === matchId ? null : matchId);\n    };\n\n    // 검색한 소환사의 puuid로 해당 참가자 정보 찾기\n    const findPlayerParticipant = (match: Match) => {\n        const searchedPuuid = matches[0].info.participants[0].puuid; // 첫 번째 매치에서 검색된 소환사의 puuid 가져오기\n        return match.info.participants.find(p => p.puuid === searchedPuuid);\n    };\n\n    return (\n        <div className=\"match-history\">\n            <GameFilter />\n            <div className=\"match-list\">\n                {matches.map((match) => {\n                    const participant = findPlayerParticipant(match);\n                    if (!participant) return null; // 참가자를 찾지 못한 경우 렌더링하지 않음\n\n                    return (\n                        <div \n                            key={match.metadata.matchId} \n                            className={`match-card ${participant.win ? 'victory' : 'defeat'}`}\n                            onClick={() => toggleMatchDetails(match.metadata.matchId)}\n                        >\n                            <div className=\"match-info\">\n                                <div className=\"champion-info\">\n                                    <img \n                                        src={`http://ddragon.leagueoflegends.com/cdn/13.24.1/img/champion/${participant.championName}.png`}\n                                        alt={participant.championName}\n                                        className=\"champion-icon\"\n                                    />\n                                    <span>{participant.championName}</span>\n                                </div>\n                                <div className=\"game-stats\">\n                                    <div className=\"kda\">\n                                        {participant.kills} / {participant.deaths} / {participant.assists}\n                                    </div>\n                                    <div className=\"kda-ratio\">\n                                        {((participant.kills + participant.assists) / Math.max(1, participant.deaths)).toFixed(2)} KDA\n                                    </div>\n                                </div>\n                                <div className=\"game-info\">\n                                    <div>{participant.win ? '승리' : '패배'}</div>\n                                    <div>{Math.floor(match.info.gameDuration / 60)}분</div>\n                                    <div>{new Date(match.info.gameCreation).toLocaleDateString()}</div>\n                                </div>\n                            </div>\n                            {expandedMatch === match.metadata.matchId && (\n                                <div className=\"match-details\">\n                                    <div className=\"items\">\n                                        {participant.items.map((itemId, index) => (\n                                            <img \n                                                key={index}\n                                                src={`http://ddragon.leagueoflegends.com/cdn/13.1.1/img/item/${itemId}.png`}\n                                                alt={`Item ${itemId}`}\n                                            />\n                                        ))}\n                                    </div>\n                                    <div className=\"additional-stats\">\n                                        <p>CS: {participant.cs} ({(participant.cs / (match.info.gameDuration / 60)).toFixed(1)})</p>\n                                        <p>Gold: {participant.goldEarned.toLocaleString()}</p>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n};","const isDevelopment = process.env.NODE_ENV === 'development';\r\n\r\n// API 관련 설정값들\r\nexport const config = {\r\n    RIOT_API_KEY: 'RGAPI-b036156f-fe4b-45e1-a7df-f0cab0392c6c', \r\n    RIOT_API_BASE_URL: 'https://kr.api.riotgames.com',\r\n    API_BASE_URL: process.env.NODE_ENV === 'development' ? 'http://localhost:8080' : ''\r\n};\r\n","import axios from 'axios';\r\nimport { config } from '../config/config';\r\n\r\nexport class RiotService {\r\n    private readonly headers = {\r\n        'X-Riot-Token': config.RIOT_API_KEY\r\n    };\r\n\r\n    async getSummonerByName(summonerName: string) {\r\n        try {\r\n            const response = await axios.get(\r\n                `${config.API_BASE_URL}/api/summoner/${encodeURIComponent(summonerName)}`,\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching summoner:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getMatchList(puuid: string, start = 0, count = 20) {\r\n        try {\r\n            const response = await axios.get(\r\n                `${config.RIOT_API_BASE_URL}/lol/match/v5/matches/by-puuid/${puuid}/ids`,\r\n                {\r\n                    headers: this.headers,\r\n                    params: { start, count }\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching match list:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getMatchDetails(matchId: string) {\r\n        try {\r\n            const response = await axios.get(\r\n                `${config.RIOT_API_BASE_URL}/lol/match/v5/matches/${matchId}`,\r\n                { headers: this.headers }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching match details:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getMatchHistory(summonerName: string) {\r\n        try {\r\n            const encodedName = encodeURIComponent(summonerName.trim());\r\n            console.log('Requesting:', `${config.API_BASE_URL}/api/matches/by-summoner/${encodedName}`);\r\n            \r\n            const response = await axios.get(\r\n                `${config.API_BASE_URL}/api/matches/by-summoner/${encodedName}`,\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    withCredentials: true\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n                console.error('API 호출 중 오류:', error.message);\r\n                if (error.response?.status === 404) {\r\n                    throw new Error('소환사를 찾을 수 없습니다.');\r\n                }\r\n                throw new Error('서버 오류가 발생했습니다.');\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getSummonerRank(summonerId: string) {\r\n        try {\r\n            const response = await axios.get(\r\n                `${config.API_BASE_URL}/api/summoner/rank/${summonerId}`,\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching summoner rank:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getCurrentGame(summonerId: string) {\r\n        try {\r\n            const response = await axios.get(\r\n                `${config.API_BASE_URL}/api/summoner/current-game/${summonerId}`,\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            if (axios.isAxiosError(error) && error.response?.status === 404) {\r\n                return null; // 게임 중이 아님\r\n            }\r\n            console.error('Error fetching current game:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\nimport { RiotService } from '../services/riotService';\nimport { SummonerContent } from './SummonerContent';\nimport './SummonerProfile.css';\n\ninterface SummonerProfileProps {\n    summonerName: string;\n}\n\nexport const SummonerProfile: React.FC<SummonerProfileProps> = ({ summonerName }) => {\n    const [summoner, setSummoner] = useState<any>(null);\n    const [rank, setRank] = useState<any>(null);\n    const [currentGame, setCurrentGame] = useState<any>(null);\n    const riotService = new RiotService();\n\n    // 소환사 이름과 태그 분리\n    const [name, tag] = summonerName.split('#');\n\n    useEffect(() => {\n        const loadSummonerData = async () => {\n            try {\n                const summonerData = await riotService.getSummonerByName(summonerName);\n                setSummoner(summonerData);\n\n                const rankData = await riotService.getSummonerRank(summonerData.id);\n                setRank(rankData);\n\n                const gameData = await riotService.getCurrentGame(summonerData.id);\n                setCurrentGame(gameData);\n            } catch (error) {\n                console.error('Error loading summoner data:', error);\n            }\n        };\n\n        loadSummonerData();\n    }, [summonerName]);\n\n    if (!summoner) return null;\n\n    const getWinRate = () => {\n        if (!rank) return null;\n        return ((rank.wins / (rank.wins + rank.losses)) * 100).toFixed(1);\n    };\n\n    return (\n        <div className=\"profile-header\">\n            <div className=\"profile-icon\">\n                <img \n                    src={`https://ak-deeplol-ddragon-cdn.deeplol.gg/cdn/img/profileicon/${summoner.profileIconId}__100.webp`}\n                    alt={summoner.name}\n                />\n                <span className=\"level\">{summoner.summonerLevel}</span>\n            </div>\n            <div className=\"profile-info\">\n                <div className=\"name-update\">\n                    <div className=\"name\">\n                        <span>{name}</span>\n                        <span className=\"tag\">#{tag}</span>\n                    </div>\n                    <div className=\"buttons\">\n                        <button className=\"update-btn\">\n                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n                                <path d=\"M2 12C2 6.47715 6.47715 2 12 2\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeDasharray=\"1 4\"/>\n                                <path d=\"M2 4L5 7M5 7L8 4M5 7V4\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                            </svg>\n                            <span>전적 갱신</span>\n                        </button>\n                        <button className=\"favorite-btn\">\n                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                            </svg>\n                            <span>즐겨찾기</span>\n                        </button>\n                    </div>\n                </div>\n                <div className=\"last-update\">\n                    <span>최근 갱신: 방금 전</span>\n                </div>\n            </div>\n        </div>\n    );\n};","import React from 'react';\r\nimport './SummonerContent.css';\r\n\r\ninterface SummonerContentProps {\r\n    rank: any;\r\n    currentGame: any;\r\n}\r\n\r\nexport const SummonerContent: React.FC<SummonerContentProps> = ({ rank, currentGame }) => {\r\n    const getWinRate = () => {\r\n        if (!rank) return null;\r\n        return ((rank.wins / (rank.wins + rank.losses)) * 100).toFixed(1);\r\n    };\r\n\r\n    return (\r\n        <div className=\"summoner-content\">\r\n            <div className=\"rank-section\">\r\n                <div className=\"rank-header\">\r\n                    <span>솔로 랭크</span>\r\n                    {!rank && <span className=\"unranked\">Unranked</span>}\r\n                </div>\r\n                {rank && (\r\n                    <div className=\"rank-info\">\r\n                        <div className=\"tier-emblem\">\r\n                            <img \r\n                                src={`https://raw.communitydragon.org/latest/plugins/rcp-fe-lol-static-assets/global/default/ranked-emblem/emblem-${rank.tier.toLowerCase()}.png`}\r\n                                alt={rank.tier}\r\n                            />\r\n                        </div>\r\n                        <div className=\"rank-details\">\r\n                            <div className=\"tier-info\">\r\n                                <span className=\"tier\">{rank.tier} {rank.rank}</span>\r\n                                <span className=\"lp\">{rank.leaguePoints} LP</span>\r\n                            </div>\r\n                            <div className=\"record\">\r\n                                <span className=\"wins\">{rank.wins}승</span>\r\n                                <span className=\"losses\">{rank.losses}패</span>\r\n                                <span className=\"win-rate\">승률 {getWinRate()}%</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport './NavigationTabs.css';\r\n\r\ntype TabType = 'overview' | 'champions' | 'ingame';\r\n\r\ninterface NavigationTabsProps {\r\n    onTabChange: (tab: TabType) => void;\r\n}\r\n\r\nexport const NavigationTabs: React.FC<NavigationTabsProps> = ({ onTabChange }) => {\r\n    const [activeTab, setActiveTab] = useState<TabType>('overview');\r\n\r\n    const handleTabClick = (tab: TabType) => {\r\n        setActiveTab(tab);\r\n        onTabChange(tab);\r\n    };\r\n\r\n    return (\r\n        <div className=\"navigation-tabs\">\r\n            <div className=\"tab-buttons\">\r\n                <button \r\n                    className={`tab ${activeTab === 'overview' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('overview')}\r\n                >\r\n                    종합\r\n                </button>\r\n                <button \r\n                    className={`tab ${activeTab === 'champions' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('champions')}\r\n                >\r\n                    챔피언\r\n                </button>\r\n                <button \r\n                    className={`tab ${activeTab === 'ingame' ? 'active' : ''}`}\r\n                    onClick={() => handleTabClick('ingame')}\r\n                >\r\n                    인게임\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}; ","import React, { useState } from 'react'; // React와 상태 관리를 위한 useState 훅을 가져옴\r\nimport './App.css';  // 이 줄 추가\r\nimport { Header } from './components/Header';\r\nimport { SearchBar } from './components/SearchBar'; // 검색창 컴포넌트\r\nimport { MatchHistory } from './components/MatchHistory'; // 매치 히스토리 표시 컴포넌트\r\nimport { RiotService } from './services/riotService'; // API 호출을 위한 서비스\r\nimport './styles/main.css'; // 스타일시트 import\r\nimport { Match } from './types/Match';\r\nimport { SummonerProfile } from './components/SummonerProfile';\r\nimport { SummonerContent } from './components/SummonerContent';\r\nimport { NavigationTabs } from './components/NavigationTabs';\r\n\r\n// 메인 App 컴포넌트\r\nconst App: React.FC = () => {\r\n    const [matches, setMatches] = useState<Match[]>([]);\r\n    const [summonerName, setSummonerName] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [rank, setRank] = useState<any>(null);\r\n    const [currentGame, setCurrentGame] = useState<any>(null);\r\n    const [activeTab, setActiveTab] = useState<'overview' | 'champions' | 'ingame'>('overview');\r\n\r\n    const riotService = new RiotService();\r\n\r\n    const handleSearch = async (name: string) => {\r\n        setSummonerName(name);\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const summonerData = await riotService.getSummonerByName(name);\r\n            const rankData = await riotService.getSummonerRank(summonerData.id);\r\n            const gameData = await riotService.getCurrentGame(summonerData.id);\r\n            const matchHistory = await riotService.getMatchHistory(name);\r\n            \r\n            setRank(rankData);\r\n            setCurrentGame(gameData);\r\n            setMatches(matchHistory);\r\n        } catch (error) {\r\n            setError('소환사를 찾을 수 없습니다. 소환사명을 확인해주세요.');\r\n            setMatches([]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <Header onSearch={handleSearch} />\r\n            {isLoading && <div className=\"loading\">검색중...</div>}\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n            {summonerName && !error && (\r\n                <div className=\"content\">\r\n                    <SummonerProfile summonerName={summonerName} />\r\n                    <NavigationTabs onTabChange={setActiveTab} />\r\n                    <div className=\"main-content\">\r\n                        <SummonerContent \r\n                            rank={rank}\r\n                            currentGame={currentGame}\r\n                        />\r\n                        {activeTab === 'overview' && <MatchHistory matches={matches} />}\r\n                        {activeTab === 'champions' && <div>챔피언 정보</div>}\r\n                        {activeTab === 'ingame' && <div>인게임 정보</div>}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n); "],"sourceRoot":""}