{"version":3,"sources":["components/SearchBar.tsx","components/MatchHistory.tsx","config/config.ts","services/riotService.ts","App.tsx","index.tsx"],"names":["SearchBar","_ref","onSearch","summonerName","setSummonerName","useState","_jsxs","onSubmit","e","preventDefault","trim","className","children","_jsx","type","value","onChange","target","placeholder","MatchHistory","matches","expandedMatch","setExpandedMatch","map","match","participant","searchedPuuid","info","participants","puuid","find","p","findPlayerParticipant","concat","win","onClick","toggleMatchDetails","matchId","metadata","src","championName","alt","kills","deaths","assists","Math","max","toFixed","floor","gameDuration","Date","gameCreation","toLocaleDateString","items","itemId","index","cs","goldEarned","toLocaleString","config","RIOT_API_KEY","RIOT_API_BASE_URL","API_BASE_URL","RiotService","constructor","headers","getSummonerByName","axios","get","encodeURIComponent","this","data","error","console","getMatchList","start","arguments","length","undefined","count","params","getMatchDetails","getMatchHistory","encodedName","log","withCredentials","isAxiosError","_error$response","message","response","status","Error","App","setMatches","isLoading","setIsLoading","setError","riotService","async","matchHistory","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8737e0f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n// SearchBar 컴포넌트의 props 타입 정의\r\ninterface SearchBarProps {\r\n    onSearch: (summonerName: string) => void; // 검색 실행 함수\r\n}\r\n\r\n// SearchBar 컴포넌트\r\nexport const SearchBar: React.FC<SearchBarProps> = ({ onSearch }) => {\r\n    // 입력된 소환사명을 저장할 상태\r\n    const [summonerName, setSummonerName] = useState('');\r\n\r\n\r\n    // 폼 제출 처리 함수\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault(); // 기본 폼 제출 동작 방지\r\n        if (summonerName.trim()) {\r\n            onSearch(summonerName); // 부모 컴포넌트의 검색 함수 호출\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"search-bar\">\r\n            <input\r\n                type=\"text\"\r\n                value={summonerName}\r\n                // 입력값이 변경될 때마다 상태 업데이트\r\n                onChange={(e) => setSummonerName(e.target.value)}\r\n                placeholder=\"소환사명#태그 (예: Hide on bush#KR1)\"\r\n                aria-label=\"소환사 검색\"\r\n            />\r\n            <button type=\"submit\">검색</button>\r\n        </form>\r\n    );\r\n};","import React, { useState } from 'react';\nimport './MatchHistory.css';\nimport { Match } from '../types/Match';\n\ninterface MatchDetails {\n    items: number[];\n    spells: number[];\n    runes: {\n        primary: number;\n        secondary: number;\n    };\n    cs: number;\n    goldEarned: number;\n    // ... 기존 Match 인터페이스의 속성들\n}\n\ninterface MatchHistoryProps {\n    matches: Match[];\n}\n\nexport const MatchHistory: React.FC<MatchHistoryProps> = ({ matches }) => {\n    const [expandedMatch, setExpandedMatch] = useState<string | null>(null);\n\n    const toggleMatchDetails = (matchId: string) => {\n        setExpandedMatch(expandedMatch === matchId ? null : matchId);\n    };\n\n    // 검색한 소환사의 puuid로 해당 참가자 정보 찾기\n    const findPlayerParticipant = (match: Match) => {\n        const searchedPuuid = matches[0].info.participants[0].puuid; // 첫 번째 매치에서 검색된 소환사의 puuid 가져오기\n        return match.info.participants.find(p => p.puuid === searchedPuuid);\n    };\n\n    return (\n        <div className=\"match-history\">\n            {matches.map((match) => {\n                const participant = findPlayerParticipant(match);\n                if (!participant) return null; // 참가자를 찾지 못한 경우 렌더링하지 않음\n\n                return (\n                    <div \n                        key={match.metadata.matchId} \n                        className={`match-card ${participant.win ? 'victory' : 'defeat'}`}\n                        onClick={() => toggleMatchDetails(match.metadata.matchId)}\n                    >\n                        <div className=\"match-info\">\n                            <div className=\"champion-info\">\n                                <img \n                                    src={`http://ddragon.leagueoflegends.com/cdn/13.24.1/img/champion/${participant.championName}.png`}\n                                    alt={participant.championName}\n                                    className=\"champion-icon\"\n                                />\n                                <span>{participant.championName}</span>\n                            </div>\n                            <div className=\"game-stats\">\n                                <div className=\"kda\">\n                                    {participant.kills} / {participant.deaths} / {participant.assists}\n                                </div>\n                                <div className=\"kda-ratio\">\n                                    {((participant.kills + participant.assists) / Math.max(1, participant.deaths)).toFixed(2)} KDA\n                                </div>\n                            </div>\n                            <div className=\"game-info\">\n                                <div>{participant.win ? '승리' : '패배'}</div>\n                                <div>{Math.floor(match.info.gameDuration / 60)}분</div>\n                                <div>{new Date(match.info.gameCreation).toLocaleDateString()}</div>\n                            </div>\n                        </div>\n                        {expandedMatch === match.metadata.matchId && (\n                            <div className=\"match-details\">\n                                <div className=\"items\">\n                                    {participant.items.map((itemId, index) => (\n                                        <img \n                                            key={index}\n                                            src={`http://ddragon.leagueoflegends.com/cdn/13.1.1/img/item/${itemId}.png`}\n                                            alt={`Item ${itemId}`}\n                                        />\n                                    ))}\n                                </div>\n                                <div className=\"additional-stats\">\n                                    <p>CS: {participant.cs} ({(participant.cs / (match.info.gameDuration / 60)).toFixed(1)})</p>\n                                    <p>Gold: {participant.goldEarned.toLocaleString()}</p>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                );\n            })}\n        </div>\n    );\n};","const isDevelopment = process.env.NODE_ENV === 'development';\r\n\r\n// API 관련 설정값들\r\nexport const config = {\r\n    RIOT_API_KEY: 'RGAPI-c169db00-99c1-4bf0-b995-7eec14cada2c', \r\n    RIOT_API_BASE_URL: 'https://kr.api.riotgames.com',\r\n    API_BASE_URL: process.env.NODE_ENV === 'development' ? 'http://localhost:8080' : ''\r\n};\r\n","import axios from 'axios';\r\nimport { config } from '../config/config';\r\n\r\nexport class RiotService {\r\n    private readonly headers = {\r\n        'X-Riot-Token': config.RIOT_API_KEY\r\n    };\r\n\r\n    async getSummonerByName(summonerName: string) {\r\n        try {\r\n            const response = await axios.get(\r\n                `${config.RIOT_API_BASE_URL}/lol/summoner/v4/summoners/by-name/${encodeURIComponent(summonerName)}`,\r\n                { headers: this.headers }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching summoner:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getMatchList(puuid: string, start = 0, count = 20) {\r\n        try {\r\n            const response = await axios.get(\r\n                `${config.RIOT_API_BASE_URL}/lol/match/v5/matches/by-puuid/${puuid}/ids`,\r\n                {\r\n                    headers: this.headers,\r\n                    params: { start, count }\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching match list:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getMatchDetails(matchId: string) {\r\n        try {\r\n            const response = await axios.get(\r\n                `${config.RIOT_API_BASE_URL}/lol/match/v5/matches/${matchId}`,\r\n                { headers: this.headers }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching match details:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getMatchHistory(summonerName: string) {\r\n        try {\r\n            const encodedName = encodeURIComponent(summonerName.trim());\r\n            console.log('Requesting:', `${config.API_BASE_URL}/api/matches/by-summoner/${encodedName}`);\r\n            \r\n            const response = await axios.get(\r\n                `${config.API_BASE_URL}/api/matches/by-summoner/${encodedName}`,\r\n                {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    withCredentials: true\r\n                }\r\n            );\r\n            return response.data;\r\n        } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n                console.error('API 호출 중 오류:', error.message);\r\n                if (error.response?.status === 404) {\r\n                    throw new Error('소환사를 찾을 수 없습니다.');\r\n                }\r\n                throw new Error('서버 오류가 발생했습니다.');\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n}","import React, { useState } from 'react'; // React와 상태 관리를 위한 useState 훅을 가져옴\r\nimport { SearchBar } from './components/SearchBar'; // 검색창 컴포넌트\r\nimport { MatchHistory } from './components/MatchHistory'; // 매치 히스토리 표시 컴포넌트\r\nimport { RiotService } from './services/riotService'; // API 호출을 위한 서비스\r\nimport './styles/main.css'; // 스타일시트 import\r\nimport { Match } from './types/Match';\r\n\r\n// 메인 App 컴포넌트\r\nconst App: React.FC = () => {\r\n    // matches 상태와 이를 업데이트하는 함수를 생성\r\n    // 초기값은 빈 배열 []\r\n    const [matches, setMatches] = useState<Match[]>([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    \r\n    // RiotService 인스턴스 생성\r\n    const riotService = new RiotService();\r\n\r\n    // 검색 처리 함수\r\n    const handleSearch = async (summonerName: string) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const matchHistory = await riotService.getMatchHistory(summonerName);\r\n            setMatches(matchHistory);\r\n        } catch (error) {\r\n            setError('소환사를 찾을 수 없습니다. 소환사명을 확인해주세요.');\r\n            setMatches([]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // 컴포넌트 렌더링\r\n    return (\r\n        <div className=\"app\">\r\n            <h1>META.XG</h1>\r\n            {/* 검색창 컴포넌트. 검색 시 handleSearch 함수가 실행됨 */}\r\n            <SearchBar onSearch={handleSearch} />\r\n            {isLoading && <div className=\"loading\">검색중...</div>}\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n            {/* matches 배열에 데이터가 있을 때만 MatchHistory 컴포넌트를 표시 */}\r\n            {matches.length > 0 && <MatchHistory matches={matches} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n); "],"sourceRoot":""}