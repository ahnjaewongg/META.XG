import React, { useState, useEffect, useCallback } from 'react';
import {
  Container, 
  Typography, 
  Box, 
  Tabs, 
  Tab, 
  Paper, 
  List, 
  ListItem, 
  ListItemText, 
  Divider, 
  Chip, 
  Button, 
  TextField, 
  Dialog, 
  CircularProgress
} from '@mui/material';
import {
  Favorite as FavoriteIcon,
  FavoriteBorder as FavoriteBorderIcon,
  Visibility as VisibilityIcon,
  Comment as CommentIcon,
  AccessTime as AccessTimeIcon,
  Person as PersonIcon,
  Add as AddIcon,
  Close as CloseIcon,
  Whatshot as WhatshotIcon,
  Star as StarIcon,
  EmojiEvents as EmojiEventsIcon
} from '@mui/icons-material';
import styles from './CommunityPage.module.css';
import { RiotService } from '../../services/riotService';

interface Post {
  id: number;
  title: string;
  content: string;
  author: string;
  date: string;
  position: string;
  likes: number;
  comments: Comment[];
  views: number;
  isFeatured: boolean;
}

interface Comment {
  id: number;
  postId: number;
  author: string;
  content: string;
  date: string;
  likes: number;
}

const positions = [
  { value: "all", label: "Ï†ÑÏ≤¥", color: "#9aa4af", icon: "üèÜ" },
  { value: "top", label: "ÌÉë", color: "#ee5a52", icon: "üõ°Ô∏è" },
  { value: "jungle", label: "Ï†ïÍ∏Ä", color: "#3b7a57", icon: "üå≤" },
  { value: "mid", label: "ÎØ∏Îìú", color: "#1e90ff", icon: "‚ö°" },
  { value: "bot", label: "Î∞îÌÖÄ", color: "#9370db", icon: "üèπ" },
  { value: "support", label: "ÏÑúÌèø", color: "#f08080", icon: "‚ú®" },
];

// Position icons mapping
const positionIcons = {
  top: <img src="/images/positions/top.png" alt="Top" width="20" height="20" />,
  jungle: <img src="/images/positions/jungle.png" alt="Jungle" width="20" height="20" />,
  mid: <img src="/images/positions/mid.png" alt="Mid" width="20" height="20" />,
  bot: <img src="/images/positions/bot.png" alt="Bot" width="20" height="20" />,
  support: <img src="/images/positions/support.png" alt="Support" width="20" height="20" />,
  all: <EmojiEventsIcon fontSize="small" />
};

const CommunityPage: React.FC = () => {
  const [currentPosition, setCurrentPosition] = useState('all');
  const [posts, setPosts] = useState<Post[]>([]);
  const [filteredPosts, setFilteredPosts] = useState<Post[]>([]);
  const [popularPosts, setPopularPosts] = useState<Post[]>([]);
  const [selectedPost, setSelectedPost] = useState<Post | null>(null);
  const [newComment, setNewComment] = useState('');
  const [postDialogOpen, setPostDialogOpen] = useState(false);
  const [newPostDialogOpen, setNewPostDialogOpen] = useState(false);
  const [newPost, setNewPost] = useState<Partial<Post>>({
    title: '',
    content: '',
    position: 'all'
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const riotService = new RiotService();

  const positionLabels: { [key: string]: string } = {
    all: 'Ï†ÑÏ≤¥',
    top: 'ÌÉë',
    jungle: 'Ï†ïÍ∏Ä',
    middle: 'ÎØ∏Îìú',
    bottom: 'Î∞îÌÖÄ',
    support: 'ÏÑúÌè¨ÌÑ∞'
  };

  const positionCounts: { [key: string]: number } = {
    all: 0,
    top: 0,
    jungle: 0,
    middle: 0,
    bottom: 0,
    support: 0
  };

  // Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î∞è Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    fetchPosts();
    fetchPopularPosts();
  }, []);

  // Ìè¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchPosts = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await riotService.getCommunityPosts();
      setPosts(data);

      // Ìè¨ÏßÄÏÖòÎ≥Ñ Í≤åÏãúÍ∏Ä Ïàò Í≥ÑÏÇ∞
      const counts = { all: data.length, top: 0, jungle: 0, mid: 0, bot: 0, support: 0 };
      data.forEach((post: Post) => {
        if (counts[post.position as keyof typeof counts] !== undefined) {
          counts[post.position as keyof typeof counts]++;
        }
      });
      
      // ÌïÑÌÑ∞ÎßÅÎêú Ìè¨Ïä§Ìä∏ ÏÑ§Ï†ï
      filterPostsByPosition(data, currentPosition);
      
      // Ìè¨ÏßÄÏÖò Ïπ¥Ïö¥Ìä∏ ÏÑ§Ï†ï
      Object.keys(positionCounts).forEach(key => {
        positionCounts[key] = counts[key as keyof typeof counts] || 0;
      });
      
    } catch (error) {
      console.error('Failed to fetch posts:', error);
      setError('Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // Ïù∏Í∏∞ Í≤åÏãúÍ∏Ä Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchPopularPosts = async () => {
    try {
      const data = await riotService.getPopularPosts();
      // Ï¢ãÏïÑÏöî ÏàòÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÎÇ¥Î¶ºÏ∞®Ïàú Ï†ïÎ†¨ÌïòÏó¨ ÏÉÅÏúÑ 5Í∞úÎßå ÌëúÏãú
      setPopularPosts(data.slice(0, 5));
    } catch (error) {
      console.error('Failed to fetch popular posts:', error);
      // Ïù∏Í∏∞ Í≤åÏãúÍ∏Ä Î°úÎìú Ïã§Ìå® Ïãú Îπà Î∞∞Ïó¥ ÏÑ§Ï†ï
      setPopularPosts([]);
    }
  };

  // Ìè¨ÏßÄÏÖòÎ≥Ñ Í≤åÏãúÍ∏Ä ÌïÑÌÑ∞ÎßÅ
  const filterPostsByPosition = (allPosts: Post[], position: string) => {
    if (position === 'all') {
      setFilteredPosts(allPosts);
    } else {
      setFilteredPosts(allPosts.filter(post => post.position === position));
    }
  };

  // Ìè¨ÏßÄÏÖò Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handlePositionChange = (newPosition: string) => {
    setCurrentPosition(newPosition);
    filterPostsByPosition(posts, newPosition);
  };

  // Í≤åÏãúÍ∏Ä ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handlePostClick = async (post: Post) => {
    try {
      // Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      const postDetails = await riotService.getPostById(post.id);
      setSelectedPost(postDetails);
      setPostDialogOpen(true);
    } catch (error) {
      console.error('Failed to fetch post details:', error);
      // API Ìò∏Ï∂ú Ïã§Ìå® Ïãú ÌòÑÏû¨ post Í∞ùÏ≤¥Î°ú ÎåÄÏ≤¥
      setSelectedPost(post);
      setPostDialogOpen(true);
    }
  };

  // Ï¢ãÏïÑÏöî Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleLikeClick = async (postId: number) => {
    try {
      await riotService.likePost(postId);
      
      // Î©îÏù∏ Í≤åÏãúÍ∏Ä Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
      setPosts(prevPosts => prevPosts.map(post => 
        post.id === postId 
          ? { ...post, likes: post.likes + 1 } 
          : post
      ));
      
      // ÌïÑÌÑ∞ÎßÅÎêú Í≤åÏãúÍ∏Ä Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
      setFilteredPosts(prevPosts => prevPosts.map(post => 
        post.id === postId 
          ? { ...post, likes: post.likes + 1 } 
          : post
      ));
      
      // Ïù∏Í∏∞ Í≤åÏãúÍ∏Ä Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
      setPopularPosts(prevPosts => prevPosts.map(post => 
        post.id === postId 
          ? { ...post, likes: post.likes + 1 } 
          : post
      ));
      
      // ÏÑ†ÌÉùÎêú Í≤åÏãúÍ∏ÄÏù¥ ÏûàÍ≥† IDÍ∞Ä ÏùºÏπòÌïòÎäî Í≤ΩÏö∞ ÏóÖÎç∞Ïù¥Ìä∏
      if (selectedPost && selectedPost.id === postId) {
        setSelectedPost({
          ...selectedPost,
          likes: selectedPost.likes + 1
        });
      }
    } catch (error) {
      console.error('Failed to like post:', error);
      // Ïã§Ìå® Ïãú ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º (Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Snackbar Îì±ÏúºÎ°ú ÎåÄÏ≤¥)
      alert('Ï¢ãÏïÑÏöîÎ•º Ï≤òÎ¶¨ÌïòÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // ÎåìÍ∏Ä Ï¢ãÏïÑÏöî Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleCommentLikeClick = async (postId: number, commentId: number) => {
    try {
      await riotService.likeComment(commentId);
      
      // Î©îÏù∏ Í≤åÏãúÍ∏Ä Î™©Î°ùÏùò ÎåìÍ∏Ä ÏóÖÎç∞Ïù¥Ìä∏
      setPosts(prevPosts => prevPosts.map(post => 
        post.id === postId 
          ? {
              ...post,
              comments: post.comments.map(comment => 
                comment.id === commentId 
                  ? { ...comment, likes: comment.likes + 1 } 
                  : comment
              )
            } 
          : post
      ));
      
      // ÏÑ†ÌÉùÎêú Í≤åÏãúÍ∏ÄÏùò ÎåìÍ∏Ä ÏóÖÎç∞Ïù¥Ìä∏
      if (selectedPost && selectedPost.id === postId) {
        setSelectedPost({
          ...selectedPost,
          comments: selectedPost.comments.map(comment => 
            comment.id === commentId 
              ? { ...comment, likes: comment.likes + 1 } 
              : comment
          )
        });
      }
    } catch (error) {
      console.error('Failed to like comment:', error);
      // Ïã§Ìå® Ïãú ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º
      alert('ÎåìÍ∏Ä Ï¢ãÏïÑÏöîÎ•º Ï≤òÎ¶¨ÌïòÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // ÎåìÍ∏Ä Ï∂îÍ∞Ä Ìï∏Îì§Îü¨
  const handleAddComment = async () => {
    if (!selectedPost || !newComment.trim()) return;
    
    try {
      setLoading(true);
      
      // ÏÉà ÎåìÍ∏Ä Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      const commentData = {
        postId: selectedPost.id,
        content: newComment,
        author: 'ÏùµÎ™Ö', // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÇ¨Ïö©
        date: new Date().toISOString()
      };
      
      // APIÎ•º ÌÜµÌïú ÎåìÍ∏Ä Ï∂îÍ∞Ä
      const result = await riotService.addComment(selectedPost.id, commentData);
      
      // ÏÉà ÎåìÍ∏Ä Í∞ùÏ≤¥ (API ÏùëÎãµ ÎòêÎäî ÏûÑÏãú ÏÉùÏÑ±)
      const newCommentObj: Comment = result || {
        id: Math.floor(Math.random() * 10000), // ÏûÑÏãú ID
        postId: selectedPost.id,
        author: 'ÏùµÎ™Ö',
        content: newComment,
        date: new Date().toISOString(),
        likes: 0
      };
      
      // Í≤åÏãúÍ∏ÄÏùò ÎåìÍ∏Ä Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
      const updatedPost = {
        ...selectedPost,
        comments: [...selectedPost.comments, newCommentObj]
      };
      
      // ÏÑ†ÌÉùÎêú Í≤åÏãúÍ∏Ä ÏóÖÎç∞Ïù¥Ìä∏
      setSelectedPost(updatedPost);
      
      // Î©îÏù∏ Í≤åÏãúÍ∏Ä Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
      setPosts(prevPosts => prevPosts.map(post => 
        post.id === selectedPost.id ? updatedPost : post
      ));
      
      // ÌïÑÌÑ∞ÎßÅÎêú Í≤åÏãúÍ∏Ä Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
      setFilteredPosts(prevPosts => prevPosts.map(post => 
        post.id === selectedPost.id ? updatedPost : post
      ));
      
      // ÎåìÍ∏Ä ÏûÖÎ†• ÌïÑÎìú Ï¥àÍ∏∞Ìôî
      setNewComment('');
    } catch (error) {
      console.error('Failed to add comment:', error);
      alert('ÎåìÍ∏ÄÏùÑ Ï∂îÍ∞ÄÌïòÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // ÏÉà Í≤åÏãúÍ∏Ä Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ïó¥Í∏∞
  const handleOpenPostDialog = () => {
    setNewPostDialogOpen(true);
  };

  // ÏÉà Í≤åÏãúÍ∏Ä Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
  const handleClosePostDialog = () => {
    setNewPostDialogOpen(false);
    setNewPost({
      title: '',
      content: '',
      position: 'all'
    });
  };

  // ÏÉà Í≤åÏãúÍ∏Ä Ï∂îÍ∞Ä Ìï∏Îì§Îü¨
  const handleAddPost = async () => {
    if (!newPost.title || !newPost.content || !newPost.position) return;
    
    try {
      setLoading(true);
      
      // ÏÉà Í≤åÏãúÍ∏Ä Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
      const postData = {
        ...newPost,
        author: 'ÏùµÎ™Ö', // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÇ¨Ïö©
        date: new Date().toISOString(),
        likes: 0,
        comments: [],
        views: 0,
        isFeatured: false
      };
      
      // APIÎ•º ÌÜµÌïú Í≤åÏãúÍ∏Ä Ï∂îÍ∞Ä
      const result = await riotService.createPost(postData);
      
      // ÏÉà Í≤åÏãúÍ∏Ä Í∞ùÏ≤¥ (API ÏùëÎãµ ÎòêÎäî ÏûÑÏãú ÏÉùÏÑ±)
      const newPostObj: Post = result || {
        id: Math.floor(Math.random() * 10000), // ÏûÑÏãú ID
        title: newPost.title || '',
        content: newPost.content || '',
        position: newPost.position || 'all',
        author: 'ÏùµÎ™Ö',
        date: new Date().toISOString(),
        likes: 0,
        comments: [],
        views: 0,
        isFeatured: false
      };
      
      // Í≤åÏãúÍ∏Ä Î™©Î°ùÏóê ÏÉà Í≤åÏãúÍ∏Ä Ï∂îÍ∞Ä
      const updatedPosts = [newPostObj, ...posts];
      setPosts(updatedPosts);
      
      // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ìè¨ÏßÄÏÖòÏóê ÎßûÍ≤å ÌïÑÌÑ∞ÎßÅÎêú Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
      filterPostsByPosition(updatedPosts, currentPosition);
      
      // Ìè¨ÏßÄÏÖò Ïπ¥Ïö¥Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
      positionCounts.all++;
      if (newPost.position && positionCounts[newPost.position as keyof typeof positionCounts] !== undefined) {
        positionCounts[newPost.position as keyof typeof positionCounts]++;
      }
      
      // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞ Î∞è Ìèº Ï¥àÍ∏∞Ìôî
      handleClosePostDialog();
    } catch (error: any) {
      console.error('Failed to create post:', error);
      alert('Í≤åÏãúÍ∏ÄÏùÑ ÏûëÏÑ±ÌïòÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // ÎÇ†Ïßú ÌòïÏãùÌôî Ìï®Ïàò
  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) {
      // Ïò§ÎäòÏù∏ Í≤ΩÏö∞ ÏãúÍ∞Ñ ÌëúÏãú
      return `Ïò§Îäò ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
    } else if (diffDays < 7) {
      // ÏùºÏ£ºÏùº Ïù¥ÎÇ¥Ïù∏ Í≤ΩÏö∞ nÏùº Ï†Ñ ÌëúÏãú
      return `${diffDays}Ïùº Ï†Ñ`;
    } else {
      // ÏùºÏ£ºÏùº Ïù¥ÏÉÅÏù∏ Í≤ΩÏö∞ ÎÖÑ-Ïõî-Ïùº ÌëúÏãú
      return `${date.getFullYear()}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getDate().toString().padStart(2, '0')}`;
    }
  };

  return (
    <Container className={styles.container}>
      <Typography variant="h4" component="h1" sx={{ marginBottom: '1.5rem' }}className={styles.pageTitle}>
        League of Legends Ïª§ÎÆ§ÎãàÌã∞
      </Typography>
      
      <div className={styles.mainGrid}>
        {/* ÏÇ¨Ïù¥Îìú Ìå®ÎÑê */}
        <div className={styles.sidePanel}>
          {/* Ìè¨ÏßÄÏÖòÎ≥Ñ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
          <div className={styles.positionNav}>
            <div className={styles.navHeader}>
              <Typography className={styles.navTitle}>
                <EmojiEventsIcon fontSize="small" />
                Ìè¨ÏßÄÏÖòÎ≥Ñ Í≤åÏãúÌåê
              </Typography>
            </div>
            <div className={styles.positionGrid}>
              {['all', 'top', 'jungle', 'middle', 'bottom', 'support'].map((pos) => (
                <div 
                  key={pos} 
                  className={`${styles.positionCard} ${currentPosition === pos ? styles.positionCardActive : ''}`}
                  onClick={() => handlePositionChange(pos)}
                >
                  <div className={styles.positionIconWrapper}>
                    {pos === 'all' ? (
                      <EmojiEventsIcon fontSize="small" sx={{ color: 'var(--gold-accent)' }} />
                    ) : (
                      <img 
                        src={`/images/positions/${pos}.png`} 
                        alt={positionLabels[pos]} 
                        width="24" 
                        height="24" 
                      />
                    )}
                  </div>
                  <Typography className={styles.positionName}>
                    {positionLabels[pos]}
                  </Typography>
                  <div className={styles.positionCount}>
                    {positionCounts[pos]}
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          {/* Ïù∏Í∏∞ Í≤åÏãúÍ∏Ä */}
          <div className={styles.popularPosts}>
            <div className={styles.popularHeader}>
              <Typography className={styles.popularTitle}>
                <WhatshotIcon fontSize="small" />
                Ïù∏Í∏∞ Í≤åÏãúÍ∏Ä
              </Typography>
            </div>
            <div className={styles.popularList}>
              {loading ? (
                <div className={styles.loadingContainer}>
                  <CircularProgress size={28} className={styles.spinner} />
                </div>
              ) : popularPosts.length > 0 ? (
                popularPosts.map((post) => (
                  <div 
                    key={post.id} 
                    className={styles.popularItem}
                    onClick={() => handlePostClick(post)}
                  >
                    <div className={styles.popularItemHeader}>
                      <span className={`${styles.positionBadge} ${styles[`${post.position}Badge`] || styles.allBadge}`}>
                        {positionLabels[post.position]}
                      </span>
                      {post.isFeatured && (
                        <StarIcon fontSize="small" sx={{ color: 'var(--gold-accent)', marginLeft: 'auto' }} />
                      )}
                    </div>
                    <Typography className={styles.popularItemTitle}>
                      {post.title}
                    </Typography>
                    <div className={styles.popularItemStats}>
                      <span className={styles.popularItemStat}>
                        <FavoriteIcon fontSize="small" />
                        {post.likes}
                      </span>
                      <span className={styles.popularItemStat}>
                        <CommentIcon fontSize="small" />
                        {post.comments.length}
                      </span>
                      <span className={styles.popularItemStat}>
                        <VisibilityIcon fontSize="small" />
                        {post.views}
                      </span>
                    </div>
                  </div>
                ))
              ) : (
                <Typography variant="body2" sx={{ padding: '1rem', color: 'var(--text-secondary)' }}>
                  Ïù∏Í∏∞ Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.
                </Typography>
              )}
            </div>
          </div>
        </div>
        
        {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
        <div className={styles.contentContainer}>
          {/* Ìè¨ÏßÄÏÖò ÏÑ†ÌÉù ÌÉ≠ */}
          <div className={styles.positionTabsContainer}>
            <div className={styles.positionTabs}>
              {['all', 'top', 'jungle', 'middle', 'bottom', 'support'].map((pos) => (
                <button
                  key={pos}
                  className={`${styles.positionTab} ${currentPosition === pos ? styles.positionTabActive : ''}`}
                  onClick={() => handlePositionChange(pos)}
                >
                  <span className={styles.tabIcon}>
                    {pos === 'all' ? (
                      <EmojiEventsIcon fontSize="small" />
                    ) : (
                      <img 
                        src={`/images/positions/${pos}.png`} 
                        alt={positionLabels[pos]} 
                        width="16" 
                        height="16" 
                      />
                    )}
                  </span>
                  {positionLabels[pos]}
                </button>
              ))}
            </div>
          </div>
          
          {/* Ìó§Îçî Î∞è Í∏ÄÏì∞Í∏∞ Î≤ÑÌäº */}
          <div className={styles.contentHeader}>
            <div className={styles.currentPosition}>
              {currentPosition === 'all' ? (
                <EmojiEventsIcon fontSize="medium" />
              ) : (
                <img 
                  src={`/images/positions/${currentPosition}.png`} 
                  alt={positionLabels[currentPosition]} 
                  width="24" 
                  height="24" 
                />
              )}
              {positionLabels[currentPosition]} Í≤åÏãúÌåê
            </div>
            <button 
              className={styles.createPostButton}
              onClick={handleOpenPostDialog}
            >
              <AddIcon fontSize="small" />
              ÏÉà Í∏Ä ÏûëÏÑ±
            </button>
          </div>
          
          {/* Í≤åÏãúÍ∏Ä Î™©Î°ù */}
          <div className={styles.postsList}>
            <div className={styles.postsHeader}>
              <Typography className={styles.postsTitle}>
                <CommentIcon fontSize="small" />
                Í≤åÏãúÍ∏Ä Î™©Î°ù
              </Typography>
            </div>
            
            {loading ? (
              <div className={styles.loadingContainer}>
                <CircularProgress size={32} className={styles.spinner} />
              </div>
            ) : error ? (
              <div className={styles.noPostsMessage}>
                <Typography>{error}</Typography>
              </div>
            ) : filteredPosts.length > 0 ? (
              <div className={styles.postsGrid}>
                {filteredPosts.map((post) => (
                  <div 
                    key={post.id} 
                    className={styles.postItem}
                    onClick={() => handlePostClick(post)}
                  >
                    <div 
                      className={styles.postPosition}
                      data-position={post.position}
                    >
                      {post.position === 'all' ? (
                        <EmojiEventsIcon fontSize="small" sx={{ color: 'var(--gold-accent)' }} />
                      ) : (
                        <img 
                          src={`/images/positions/${post.position}.png`} 
                          alt={positionLabels[post.position]} 
                          width="18" 
                          height="18" 
                        />
                      )}
                    </div>
                    
                    <div className={styles.postContent}>
                      <Typography className={styles.postTitle}>
                        {post.title}
                        {post.comments.length > 0 && (
                          <span className={styles.commentCount}>{post.comments.length}</span>
                        )}
                      </Typography>
                      <div className={styles.postInfo}>
                        <div className={styles.postAuthor}>
                          <PersonIcon fontSize="small" />
                          {post.author}
                        </div>
                        <span>‚Ä¢</span>
                        <div>{formatDate(post.date)}</div>
                      </div>
                    </div>
                    
                    <div className={styles.postStats}>
                      <div className={styles.postDate}>
                        {new Date(post.date).toLocaleDateString()}
                      </div>
                      <div className={styles.postMetrics}>
                        <div className={styles.postMetric}>
                          <FavoriteIcon fontSize="small" />
                          {post.likes}
                        </div>
                        <div className={styles.postMetric}>
                          <CommentIcon fontSize="small" />
                          {post.comments.length}
                        </div>
                        <div className={styles.postMetric}>
                          <VisibilityIcon fontSize="small" />
                          {post.views}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className={styles.noPostsMessage}>
                <div className={styles.emptyIcon}>
                  <CommentIcon fontSize="inherit" />
                </div>
                <Typography variant="h6">Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§</Typography>
                <Typography variant="body2">Ï≤´ Î≤àÏß∏ Í≤åÏãúÍ∏ÄÏùÑ ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî!</Typography>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Dialog 
        open={postDialogOpen} 
        onClose={() => setPostDialogOpen(false)}
        maxWidth="md"
        fullWidth
        PaperProps={{
          className: styles.postDialog
        }}
      >
        {selectedPost && (
          <>
            <div className={styles.dialogHeader}>
              <Typography variant="h5" className={styles.dialogTitle}>
                {selectedPost.title}
              </Typography>
              <button 
                className={styles.closeButton}
                onClick={() => setPostDialogOpen(false)}
              >
                <CloseIcon />
              </button>
            </div>
            <div className={styles.dialogContent}>
              <div className={styles.postMeta}>
                <div className={styles.metaItem}>
                  <PersonIcon fontSize="small" />
                  {selectedPost.author}
                </div>
                <div className={styles.metaItem}>
                  <AccessTimeIcon fontSize="small" />
                  {formatDate(selectedPost.date)}
                </div>
                <div className={styles.metaItem}>
                  <span className={`${styles.positionBadge} ${styles[`${selectedPost.position}Badge`] || styles.allBadge}`}>
                    {positionLabels[selectedPost.position]}
                  </span>
                </div>
                <div className={styles.metaItem}>
                  <VisibilityIcon fontSize="small" />
                  {selectedPost.views} Ï°∞Ìöå
                </div>
              </div>
              
              <div className={styles.postBody}>
                {selectedPost.content}
              </div>
              
              <div className={styles.postActions}>
                <button 
                  className={styles.likeButton}
                  onClick={() => handleLikeClick(selectedPost.id)}
                >
                  <FavoriteIcon />
                  Ï¢ãÏïÑÏöî {selectedPost.likes}
                </button>
              </div>
              
              <div className={styles.commentsDivider}></div>
              
              <div className={styles.commentsHeader}>
                <CommentIcon fontSize="small" />
                ÎåìÍ∏Ä {selectedPost.comments.length}
              </div>
              
              {selectedPost.comments.length > 0 ? (
                <div className={styles.commentsList}>
                  {selectedPost.comments.map((comment) => (
                    <div key={comment.id} className={styles.commentItem}>
                      <div className={styles.commentHeader}>
                        <div className={styles.commentAuthorInfo}>
                          <div className={styles.commentAvatar}>
                            <PersonIcon fontSize="small" />
                          </div>
                          <div>
                            <div className={styles.commentAuthorName}>{comment.author}</div>
                            <div className={styles.commentDate}>{formatDate(comment.date)}</div>
                          </div>
                        </div>
                      </div>
                      <div className={styles.commentBody}>{comment.content}</div>
                      <div className={styles.commentActions}>
                        <button 
                          className={styles.commentLikeButton}
                          onClick={() => handleCommentLikeClick(selectedPost.id, comment.id)}
                        >
                          <FavoriteIcon fontSize="small" />
                          {comment.likes}
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className={styles.noCommentsMessage}>
                  ÏïÑÏßÅ ÎåìÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§. Ï≤´ ÎåìÍ∏ÄÏùÑ ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî!
                </div>
              )}
              
              <div className={styles.addCommentForm}>
                <textarea
                  className={styles.commentInput}
                  placeholder="ÎåìÍ∏Ä ÏûëÏÑ±"
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                />
                <button 
                  className={styles.commentSubmitButton}
                  onClick={handleAddComment}
                  disabled={loading || !newComment.trim()}
                >
                  {loading ? 'Í≤åÏãú Ï§ë...' : 'ÎåìÍ∏Ä ÏûëÏÑ±'}
                </button>
              </div>
            </div>
          </>
        )}
      </Dialog>
      
      {/* ÏÉà Í≤åÏãúÍ∏Ä ÏûëÏÑ± Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Dialog 
        open={newPostDialogOpen} 
        onClose={handleClosePostDialog}
        maxWidth="md"
        fullWidth
        PaperProps={{
          className: styles.postDialog
        }}
      >
        <div className={styles.dialogHeader}>
          <Typography variant="h5" className={styles.dialogTitle}>
            ÏÉà Í≤åÏãúÍ∏Ä ÏûëÏÑ±
          </Typography>
          <button 
            className={styles.closeButton}
            onClick={handleClosePostDialog}
          >
            <CloseIcon />
          </button>
        </div>
        <div className={styles.dialogContent}>
          <div className={styles.newPostForm}>
            <div className={styles.formField}>
              <label className={styles.fieldLabel}>Ï†úÎ™©</label>
              <input
                type="text"
                className={styles.textInput}
                placeholder="Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                value={newPost.title || ''}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewPost({...newPost, title: e.target.value})}
              />
            </div>
            
            <div className={styles.formField}>
              <label className={styles.fieldLabel}>ÎÇ¥Ïö©</label>
              <textarea
                className={styles.textArea}
                placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                value={newPost.content || ''}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setNewPost({...newPost, content: e.target.value})}
              />
            </div>
            
            <div className={styles.formField}>
              <label className={styles.fieldLabel}>Ìè¨ÏßÄÏÖò</label>
              <div className={styles.positionOptions}>
                {['all', 'top', 'jungle', 'middle', 'bottom', 'support'].map((pos) => (
                  <div 
                    key={pos} 
                    className={`${styles.positionOption} ${newPost.position === pos ? styles.positionOptionSelected : ''}`}
                    onClick={() => setNewPost({...newPost, position: pos})}
                  >
                    {pos === 'all' ? (
                      <EmojiEventsIcon fontSize="small" />
                    ) : (
                      <img 
                        src={`/images/positions/${pos}.png`} 
                        alt={positionLabels[pos]} 
                        width="18" 
                        height="18" 
                      />
                    )}
                    {positionLabels[pos]}
                  </div>
                ))}
              </div>
            </div>
            
            <div className={styles.formActions}>
              <button 
                className={styles.cancelButton}
                onClick={handleClosePostDialog}
              >
                Ï∑®ÏÜå
              </button>
              <button 
                className={styles.submitButton}
                onClick={handleAddPost}
                disabled={loading || !newPost.title || !newPost.content}
              >
                {loading ? 'Í≤åÏãú Ï§ë...' : 'Í≤åÏãúÌïòÍ∏∞'}
              </button>
            </div>
          </div>
        </div>
      </Dialog>
    </Container>
  );
};

export default CommunityPage;
export { CommunityPage }; 